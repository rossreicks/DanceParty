# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches: [ master ]

name: Deploy to AWS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js 10.x
      uses: actions/setup-node@v1
      with:
        node-version: 10.x

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install lambda packages
      working-directory: ./lambda_code/spotify-search
      run: npm install

    - name: CF Package
      run: aws cloudformation package --template-file ./cloudformation/template.yml --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-ka7nlc6hsejl --s3-prefix dance-party-lambdas --output-template-file ./cloudformation/packaged-template.yml

    - name: CF Deploy
      run: aws cloudformation deploy --template-file ./cloudformation/packaged-template.yml --stack-name dance-party --no-fail-on-empty-changeset --parameter-overrides ClientId=${{ secrets.SPOTIFY_CLIENT_ID }} ClientSecret=${{ secrets.SPOTIFY_CLIENT_SECRET }}

    - name: Install deps
      working-directory: ./sites/dance-party
      run: npm install

    - name: Build Angular Site
      working-directory: ./sites/dance-party
      run: npm run build:prod
    
    - name: Upload site to s3
      run: aws s3 sync ./sites/dance-party/dist/dance-party s3://reicksross-dance-party-static-content --delete

    - name: Invalidate Cache
      run: aws cloudfront create-invalidation --distribution-id E1WREWUDWDJNXT --paths "/main.*.js" "/styles.*.css" "/runtime.*.js" "/index.html" "/polyfills.*.js"
      
