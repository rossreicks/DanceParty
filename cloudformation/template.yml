AWSTemplateFormatVersion: 2010-09-09
Description: Dance Party Stack
Parameters:
  DomainName:
    Type: String
    Default: dance-party.rossreicks.com
  ConnectionTableName:
    Type: String
    Default: 'dance_party_connections'
  PartyTableName:
    Type: String
    Default: 'dance_party_parties'
  ClientId:
    Type: String
    Default: ''
  ClientSecret:
    Type: String
    Default: ''
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: reicksross-dance-party-static-content

  BucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: S3Bucket
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: 
              Fn::Join: 
                - ""
                - 
                  - "arn:aws:s3:::"
                  - 
                    Ref: S3Bucket
                  - "/*"
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
          

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: oid to connect to s3

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        Aliases:
          - !Ref DomainName
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1
          AcmCertificateArn: !Ref Certificate
        CustomErrorResponses:
          -
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          -
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          TargetOriginId: s3-bucket
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: True
        Origins:
          -
            DomainName: !GetAtt S3Bucket.DomainName
            Id: s3-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z0455587QPN9KHP9CHH1
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: 
          !Join
            - ''
            - 
              - !GetAtt CloudFront.DomainName
              - '.'
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  WebsocketApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: dance-party-websocket-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
          
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  CreatePartyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: createparty
      AuthorizationType: NONE
      OperationName: CreatePartyRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref CreatePartyInteg
  CreatePartyInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Create Party Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePartyFunction.Arn}/invocations

  QueueSongRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: queuesong
      AuthorizationType: NONE
      OperationName: QueueSongRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref QueueSongInteg
  QueueSongInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Queue Song Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueueSongFunction.Arn}/invocations

  SearchRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: search
      AuthorizationType: NONE
      OperationName: SearchRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SearchInteg
  SearchInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Search Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFunction.Arn}/invocations

  # Deployment:
  #   Type: AWS::ApiGatewayV2::Deployment
  #   DependsOn:
  #   - ConnectRoute
  #   - CreatePartyRoute
  #   - DisconnectRoute
  #   - QueueSongRoute
  #   - SearchRoute
  #   Properties:
  #     ApiId: !Ref WebsocketApiGateway

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      AutoDeploy: True
      ApiId: !Ref WebsocketApiGateway

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref ConnectionTableName

  PartiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "partyId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "partyId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref PartyTableName

  OnConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda_code/on-connect/
      Handler: on-connect.handler
      MemorySize: 256
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/dance-party-lambda-role
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          PARTY_TABLE_TABLE: !Ref PartyTableName

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda_code/on-disconnect/
      Handler: on-disconnect.handler
      MemorySize: 256
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/dance-party-lambda-role
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          PARTY_TABLE_TABLE: !Ref PartyTableName

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  CreatePartyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda_code/create-party/
      Handler: create-party.handler
      MemorySize: 256
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/dance-party-lambda-role
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          PARTY_TABLE_TABLE: !Ref PartyTableName

  CreatePartyPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreatePartyFunction
      Principal: apigateway.amazonaws.com

  SearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda_code/spotify-search/
      Handler: spotify-search.handler
      MemorySize: 256
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/dance-party-lambda-role
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          PARTY_TABLE_TABLE: !Ref PartyTableName
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret

  SearchPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SearchFunction
      Principal: apigateway.amazonaws.com

  QueueSongFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda_code/queue-song/
      Handler: queue-song.handler
      MemorySize: 256
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/dance-party-lambda-role
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          PARTY_TABLE_TABLE: !Ref PartyTableName

  QueueSongPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref QueueSongFunction
      Principal: apigateway.amazonaws.com